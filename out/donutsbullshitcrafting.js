/*! For license information please see donutsbullshitcrafting.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/addRecipe.ts":function(e,t){var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function c(e){try{s(n.next(e))}catch(e){a(e)}}function i(e){try{s(n.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,i)}s((n=n.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var r,n,o,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},c=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return c.next=i(0),c.throw=i(1),c.return=i(2),"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function i(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;c&&(c=0,i[0]&&(a=0)),a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.addRecipe=function(e,t,o,a){function c(){return r(this,void 0,void 0,(function(){var r,c,i,s,l,u;return n(this,(function(n){switch(n.label){case 0:return[4,new Promise((function(e,t){var r=setInterval((function(){ModAPI.blocks&&(clearInterval(r),e())}),100)}))];case 1:return n.sent(),r=ModAPI.reflect.getClassById("java.lang.Object").class,c=[],Object.keys(o).forEach((function(e){var t;c.push((t=e,ModAPI.reflect.getClassById("java.lang.Character").staticMethods.valueOf.method(t[0].charCodeAt(0))));var r=ModAPI.blocks[o[e].id].getRef();c.push(r)})),i=a.flatMap((function(e){return ModAPI.util.str(e)})),s=ModAPI.util.makeArray(r,i.concat(c)),t?l=ModAPI.reflect.getClassById("net.minecraft.item.ItemStack").constructors[1](ModAPI.blocks[e].getRef(),1):t||(l=ModAPI.reflect.getClassById("net.minecraft.item.ItemStack").constructors[1](ModAPI.items[e].getRef(),1)),u=ModAPI.reflect.getClassById("net.minecraft.item.crafting.CraftingManager").staticMethods.getInstance.method(),ModAPI.hooks.methods.nmic_CraftingManager_addRecipe(u,l,s),[2]}}))}))}ModAPI.dedicatedServer.appendCode(c),c()}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,r),a.exports}var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0});var t=r("./src/addRecipe.ts");ModAPI.meta.title("Donut's Bullshit Crafting"),ModAPI.meta.version("v0.1"),ModAPI.meta.description("Based off of this video: <a>https://www.youtube.com/watch?v=syPUpzWGlJY</a>"),ModAPI.meta.credits("STPv22"),(0,t.addRecipe)("diamond_block",!0,{D:{type:"block",id:"dirt"}},["DDD","DDD","DDD"])})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QW9CSixHQUFVeEQsS0FBSzJELEVBQU90RCxRQUFTc0QsRUFBUUEsRUFBT3RELFFBQVNrRCxHQUdwRUksRUFBT3RELE9BQ2Ysd0JDckJBaEIsT0FBT2UsZUFBZUMsRUFBUyxhQUFjLENBQUVwQyxPQUFPLElBQ3RELElBQUk0RixFQUFjLEVBQVEsc0JBRTFCdEMsT0FBT3VDLEtBQUtDLE1BQU0sNkJBQ2xCeEMsT0FBT3VDLEtBQUtFLFFBQVEsUUFDcEJ6QyxPQUFPdUMsS0FBS0csWUFBWSwrRUFDeEIxQyxPQUFPdUMsS0FBS0ksUUFBUSxXQUNwQixFQUFJTCxFQUFZdkQsV0FBVyxpQkFBaUIsRUFBTSxDQUM5QyxFQUFLLENBQ0Q2RCxLQUFNLFFBQ043QixHQUFJLFNBRVQsQ0FDQyxNQUNBLE1BQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb251dHNidWxsc2hpdGNyYWZ0aW5nLy4vc3JjL2FkZFJlY2lwZS50cyIsIndlYnBhY2s6Ly9kb251dHNidWxsc2hpdGNyYWZ0aW5nL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2RvbnV0c2J1bGxzaGl0Y3JhZnRpbmcvLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnID0gT2JqZWN0LmNyZWF0ZSgodHlwZW9mIEl0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBJdGVyYXRvciA6IE9iamVjdCkucHJvdG90eXBlKTtcbiAgICByZXR1cm4gZy5uZXh0ID0gdmVyYigwKSwgZ1tcInRocm93XCJdID0gdmVyYigxKSwgZ1tcInJldHVyblwiXSA9IHZlcmIoMiksIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFkZFJlY2lwZSA9IGFkZFJlY2lwZTtcbmZ1bmN0aW9uIGFkZFJlY2lwZShpdGVtUmVzLCBpc0Jsb2NrLCBsZWdlbmQsIHBhdHRlcm4pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGVSZWNpcGUoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFRvQ2hhcihjaGFyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vZEFQSS5yZWZsZWN0LmdldENsYXNzQnlJZChcImphdmEubGFuZy5DaGFyYWN0ZXJcIikuc3RhdGljTWV0aG9kcy52YWx1ZU9mLm1ldGhvZChjaGFyWzBdLmNoYXJDb2RlQXQoMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIE9iamVjdENsYXNzLCByZWNpcGVJbnRlcm5hbCwgcmVjaXBlQ29udGVudHMsIHJlY2lwZSwgcmVzdWx0SXRlbSwgY3JhZnRpbmdNYW5hZ2VyO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1vZEFQSS5ibG9ja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdENsYXNzID0gTW9kQVBJLnJlZmxlY3QuZ2V0Q2xhc3NCeUlkKFwiamF2YS5sYW5nLk9iamVjdFwiKS5jbGFzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2lwZUludGVybmFsID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhsZWdlbmQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2lwZUludGVybmFsLnB1c2goVG9DaGFyKGtleSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmdyZWRpZW50ID0gTW9kQVBJLmJsb2Nrc1tsZWdlbmRba2V5XS5pZF0uZ2V0UmVmKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBlSW50ZXJuYWwucHVzaChpbmdyZWRpZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBlQ29udGVudHMgPSBwYXR0ZXJuLmZsYXRNYXAoZnVuY3Rpb24gKHJvdykgeyByZXR1cm4gTW9kQVBJLnV0aWwuc3RyKHJvdyk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBlID0gTW9kQVBJLnV0aWwubWFrZUFycmF5KE9iamVjdENsYXNzLCByZWNpcGVDb250ZW50cy5jb25jYXQocmVjaXBlSW50ZXJuYWwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0Jsb2NrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEl0ZW0gPSBNb2RBUEkucmVmbGVjdC5nZXRDbGFzc0J5SWQoXCJuZXQubWluZWNyYWZ0Lml0ZW0uSXRlbVN0YWNrXCIpLmNvbnN0cnVjdG9yc1sxXShNb2RBUEkuYmxvY2tzW2l0ZW1SZXNdLmdldFJlZigpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFpc0Jsb2NrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEl0ZW0gPSBNb2RBUEkucmVmbGVjdC5nZXRDbGFzc0J5SWQoXCJuZXQubWluZWNyYWZ0Lml0ZW0uSXRlbVN0YWNrXCIpLmNvbnN0cnVjdG9yc1sxXShNb2RBUEkuaXRlbXNbaXRlbVJlc10uZ2V0UmVmKCksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JhZnRpbmdNYW5hZ2VyID0gTW9kQVBJLnJlZmxlY3QuZ2V0Q2xhc3NCeUlkKFwibmV0Lm1pbmVjcmFmdC5pdGVtLmNyYWZ0aW5nLkNyYWZ0aW5nTWFuYWdlclwiKS5zdGF0aWNNZXRob2RzLmdldEluc3RhbmNlLm1ldGhvZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgTW9kQVBJLmhvb2tzLm1ldGhvZHMubm1pY19DcmFmdGluZ01hbmFnZXJfYWRkUmVjaXBlKGNyYWZ0aW5nTWFuYWdlciwgcmVzdWx0SXRlbSwgcmVjaXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE1vZEFQSS5kZWRpY2F0ZWRTZXJ2ZXIuYXBwZW5kQ29kZShjcmVhdGVSZWNpcGUpO1xuICAgIGNyZWF0ZVJlY2lwZSgpO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGFkZFJlY2lwZV8xID0gcmVxdWlyZShcIi4vYWRkUmVjaXBlXCIpO1xuLy9Nb2RBUEkubWV0YS5pY29uKFwiXCIpO1xuTW9kQVBJLm1ldGEudGl0bGUoXCJEb251dCdzIEJ1bGxzaGl0IENyYWZ0aW5nXCIpO1xuTW9kQVBJLm1ldGEudmVyc2lvbihcInYwLjFcIik7XG5Nb2RBUEkubWV0YS5kZXNjcmlwdGlvbihcIkJhc2VkIG9mZiBvZiB0aGlzIHZpZGVvOiA8YT5odHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PXN5UFVweldHbEpZPC9hPlwiKTtcbk1vZEFQSS5tZXRhLmNyZWRpdHMoXCJTVFB2MjJcIik7XG4oMCwgYWRkUmVjaXBlXzEuYWRkUmVjaXBlKShcImRpYW1vbmRfYmxvY2tcIiwgdHJ1ZSwge1xuICAgIFwiRFwiOiB7XG4gICAgICAgIHR5cGU6IFwiYmxvY2tcIixcbiAgICAgICAgaWQ6IFwiZGlydFwiIC8vIFVzaW5nIGRpcnQgYmxvY2tzXG4gICAgfVxufSwgW1xuICAgIFwiREREXCIsXG4gICAgXCJERERcIixcbiAgICBcIkRERFwiXG5dKTtcbiJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwiZyIsIk9iamVjdCIsImNyZWF0ZSIsIkl0ZXJhdG9yIiwicHJvdG90eXBlIiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibiIsInYiLCJvcCIsIlR5cGVFcnJvciIsImNhbGwiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiYWRkUmVjaXBlIiwiaXRlbVJlcyIsImlzQmxvY2siLCJsZWdlbmQiLCJwYXR0ZXJuIiwiY3JlYXRlUmVjaXBlIiwiT2JqZWN0Q2xhc3MiLCJyZWNpcGVJbnRlcm5hbCIsInJlY2lwZUNvbnRlbnRzIiwicmVjaXBlIiwicmVzdWx0SXRlbSIsImNyYWZ0aW5nTWFuYWdlciIsIl9hIiwicmVzIiwicmVqIiwieCIsInNldEludGVydmFsIiwiTW9kQVBJIiwiYmxvY2tzIiwiY2xlYXJJbnRlcnZhbCIsInJlZmxlY3QiLCJnZXRDbGFzc0J5SWQiLCJjbGFzcyIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiY2hhciIsInN0YXRpY01ldGhvZHMiLCJ2YWx1ZU9mIiwibWV0aG9kIiwiY2hhckNvZGVBdCIsImluZ3JlZGllbnQiLCJpZCIsImdldFJlZiIsImZsYXRNYXAiLCJyb3ciLCJ1dGlsIiwic3RyIiwibWFrZUFycmF5IiwiY29uY2F0IiwiY29uc3RydWN0b3JzIiwiaXRlbXMiLCJnZXRJbnN0YW5jZSIsImhvb2tzIiwibWV0aG9kcyIsIm5taWNfQ3JhZnRpbmdNYW5hZ2VyX2FkZFJlY2lwZSIsImRlZGljYXRlZFNlcnZlciIsImFwcGVuZENvZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiYWRkUmVjaXBlXzEiLCJtZXRhIiwidGl0bGUiLCJ2ZXJzaW9uIiwiZGVzY3JpcHRpb24iLCJjcmVkaXRzIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=