(() => {
  // src/addRecipe.ts
  function addRecipe(itemRes, isBlock, legend, pattern) {
    async function createRecipe() {
      await new Promise((res, rej) => {
        var x = setInterval(() => {
          if (ModAPI.blocks) {
            clearInterval(x);
            res();
          }
        }, 100);
      });
      var ObjectClass = ModAPI.reflect.getClassById("java.lang.Object").class;
      function ToChar(char) {
        return ModAPI.reflect.getClassById("java.lang.Character").staticMethods.valueOf.method(char[0].charCodeAt(0));
      }
      var recipeInternal = [];
      Object.keys(legend).forEach((key) => {
        recipeInternal.push(ToChar(key));
        var ingredient = ModAPI.blocks[legend[key].id].getRef();
        recipeInternal.push(ingredient);
      });
      var recipeContents = pattern.flatMap((row) => ModAPI.util.str(row));
      var recipe = ModAPI.util.makeArray(ObjectClass, recipeContents.concat(recipeInternal));
      let resultItem;
      if (isBlock) resultItem = ModAPI.reflect.getClassById("net.minecraft.item.ItemStack").constructors[1](ModAPI.blocks[itemRes].getRef(), 1);
      else if (!isBlock) resultItem = ModAPI.reflect.getClassById("net.minecraft.item.ItemStack").constructors[1](ModAPI.items[itemRes].getRef(), 1);
      var craftingManager = ModAPI.reflect.getClassById("net.minecraft.item.crafting.CraftingManager").staticMethods.getInstance.method();
      ModAPI.hooks.methods.nmic_CraftingManager_addRecipe(craftingManager, resultItem, recipe);
    }
    ModAPI.dedicatedServer.appendCode(createRecipe);
    createRecipe();
  }

  // src/main.ts
  ModAPI.meta.title("Donut's Bullshit Crafting");
  ModAPI.meta.version("v0.1");
  ModAPI.meta.description("Based off of this video: <a>https://www.youtube.com/watch?v=syPUpzWGlJY</a>");
  ModAPI.meta.credits("STPv22");
  addRecipe(
    "diamond_block",
    true,
    {
      "D": {
        type: "block",
        id: "dirt"
        // Using dirt blocks
      }
    },
    [
      "DDD",
      "DDD",
      "DDD"
    ]
  );
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2FkZFJlY2lwZS50cyIsICIuLi9zcmMvbWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGZ1bmN0aW9uIGFkZFJlY2lwZShpdGVtUmVzIDogc3RyaW5nLCBpc0Jsb2NrIDogYm9vbGVhbiwgbGVnZW5kIDoge30sIHBhdHRlcm4gOiBzdHJpbmdbXSl7XG4gICAgXG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVJlY2lwZSgpIHtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXMscmVqKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHggPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKE1vZEFQSS5ibG9ja3Mpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB2YXIgT2JqZWN0Q2xhc3MgPSBNb2RBUEkucmVmbGVjdC5nZXRDbGFzc0J5SWQoXCJqYXZhLmxhbmcuT2JqZWN0XCIpLmNsYXNzO1xuICAgICAgICAgICAgZnVuY3Rpb24gVG9DaGFyKGNoYXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTW9kQVBJLnJlZmxlY3QuZ2V0Q2xhc3NCeUlkKFwiamF2YS5sYW5nLkNoYXJhY3RlclwiKS5zdGF0aWNNZXRob2RzLnZhbHVlT2YubWV0aG9kKGNoYXJbMF0uY2hhckNvZGVBdCgwKSk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBEZWZpbmUgdGhlIHJlY2lwZSBsZWdlbmQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gaXRlbXNcbiAgICAgICAgICAgIC8vIHZhciByZWNpcGVMZWdlbmQgPSB7XG4gICAgICAgICAgICAvLyAgICAgXCJEXCI6IHtcbiAgICAgICAgICAgIC8vICAgICAgICAgdHlwZTogXCJibG9ja1wiLFxuICAgICAgICAgICAgLy8gICAgICAgICBpZDogXCJkaXJ0XCIgLy8gVXNpbmcgZGlydCBibG9ja3NcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9O1xuICAgIFxuICAgICAgICAgICAgLy8gRGVmaW5lIHRoZSBjcmFmdGluZyBncmlkIHBhdHRlcm4gZm9yIHRoZSByZWNpcGVcbiAgICAgICAgICAgIC8vIHZhciByZWNpcGVQYXR0ZXJuID0gW1xuICAgICAgICAgICAgLy8gICAgIFwiREREXCIsXG4gICAgICAgICAgICAvLyAgICAgXCJERERcIixcbiAgICAgICAgICAgIC8vICAgICBcIkRERFwiXG4gICAgICAgICAgICAvLyBdO1xuICAgIFxuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgcmVjaXBlIHBhdHRlcm4gYW5kIGxlZ2VuZCBpbnRvIHRoZSByZXF1aXJlZCBmb3JtYXRcbiAgICAgICAgICAgIHZhciByZWNpcGVJbnRlcm5hbCA9IFtdO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMobGVnZW5kKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICByZWNpcGVJbnRlcm5hbC5wdXNoKFRvQ2hhcihrZXkpKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5ncmVkaWVudCA9IE1vZEFQSS5ibG9ja3NbbGVnZW5kW2tleV0uaWRdLmdldFJlZigpO1xuICAgICAgICAgICAgICAgIHJlY2lwZUludGVybmFsLnB1c2goaW5ncmVkaWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgIHZhciByZWNpcGVDb250ZW50cyA9IHBhdHRlcm4uZmxhdE1hcChyb3cgPT4gTW9kQVBJLnV0aWwuc3RyKHJvdykpO1xuICAgICAgICAgICAgdmFyIHJlY2lwZSA9IE1vZEFQSS51dGlsLm1ha2VBcnJheShPYmplY3RDbGFzcywgcmVjaXBlQ29udGVudHMuY29uY2F0KHJlY2lwZUludGVybmFsKSk7XG4gICAgXG4gICAgICAgICAgICAvLyBEZWZpbmUgdGhlIG91dHB1dCBpdGVtIGFzIGRpYW1vbmRfYmxvY2tcbiAgICAgICAgICAgIGxldCByZXN1bHRJdGVtO1xuICAgICAgICAgICAgaWYgKGlzQmxvY2spIHJlc3VsdEl0ZW0gPSBNb2RBUEkucmVmbGVjdC5nZXRDbGFzc0J5SWQoXCJuZXQubWluZWNyYWZ0Lml0ZW0uSXRlbVN0YWNrXCIpLmNvbnN0cnVjdG9yc1sxXShNb2RBUEkuYmxvY2tzW2l0ZW1SZXNdLmdldFJlZigpLCAxKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc0Jsb2NrKSByZXN1bHRJdGVtID0gTW9kQVBJLnJlZmxlY3QuZ2V0Q2xhc3NCeUlkKFwibmV0Lm1pbmVjcmFmdC5pdGVtLkl0ZW1TdGFja1wiKS5jb25zdHJ1Y3RvcnNbMV0oTW9kQVBJLml0ZW1zW2l0ZW1SZXNdLmdldFJlZigpLCAxKTtcbiAgICBcbiAgICBcbiAgICAgICAgICAgIC8vIFJlZ2lzdGVyIHRoZSByZWNpcGUgd2l0aCBDcmFmdGluZ01hbmFnZXJcbiAgICAgICAgICAgIHZhciBjcmFmdGluZ01hbmFnZXIgPSBNb2RBUEkucmVmbGVjdC5nZXRDbGFzc0J5SWQoXCJuZXQubWluZWNyYWZ0Lml0ZW0uY3JhZnRpbmcuQ3JhZnRpbmdNYW5hZ2VyXCIpLnN0YXRpY01ldGhvZHMuZ2V0SW5zdGFuY2UubWV0aG9kKCk7XG4gICAgICAgICAgICBNb2RBUEkuaG9va3MubWV0aG9kcy5ubWljX0NyYWZ0aW5nTWFuYWdlcl9hZGRSZWNpcGUoY3JhZnRpbmdNYW5hZ2VyLCByZXN1bHRJdGVtLCByZWNpcGUpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIE1vZEFQSS5kZWRpY2F0ZWRTZXJ2ZXIuYXBwZW5kQ29kZShjcmVhdGVSZWNpcGUpO1xuICAgIFxuICAgICAgICBjcmVhdGVSZWNpcGUoKTtcbn0iLCAiaW1wb3J0IHsgYWRkUmVjaXBlIH0gZnJvbSBcIi4vYWRkUmVjaXBlXCI7XG5cbi8vTW9kQVBJLm1ldGEuaWNvbihcIlwiKTtcbk1vZEFQSS5tZXRhLnRpdGxlKFwiRG9udXQncyBCdWxsc2hpdCBDcmFmdGluZ1wiKTtcbk1vZEFQSS5tZXRhLnZlcnNpb24oXCJ2MC4xXCIpO1xuTW9kQVBJLm1ldGEuZGVzY3JpcHRpb24oXCJCYXNlZCBvZmYgb2YgdGhpcyB2aWRlbzogPGE+aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1zeVBVcHpXR2xKWTwvYT5cIik7XG5Nb2RBUEkubWV0YS5jcmVkaXRzKFwiU1RQdjIyXCIpO1xuXG5hZGRSZWNpcGUoXCJkaWFtb25kX2Jsb2NrXCIsIFxuICAgIHRydWUsIFxuICAgIHtcbiAgICAgICAgXCJEXCI6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiYmxvY2tcIixcbiAgICAgICAgICAgIGlkOiBcImRpcnRcIiAvLyBVc2luZyBkaXJ0IGJsb2Nrc1xuICAgICAgICB9XG4gICAgfSxcbiAgICBbXG4gICAgICAgIFwiREREXCIsXG4gICAgICAgIFwiREREXCIsXG4gICAgICAgIFwiREREXCJcbiAgICBdKTsiXSwKICAibWFwcGluZ3MiOiAiOztBQUFPLFdBQVMsVUFBVSxTQUFrQixTQUFtQixRQUFhLFNBQW1CO0FBRXZGLG1CQUFlLGVBQWU7QUFDMUIsWUFBTSxJQUFJLFFBQWMsQ0FBQyxLQUFJLFFBQVE7QUFDakMsWUFBSSxJQUFJLFlBQVksTUFBTTtBQUN0QixjQUFHLE9BQU8sUUFBTztBQUNiLDBCQUFjLENBQUM7QUFDZixnQkFBSTtBQUFBLFVBQ1I7QUFBQSxRQUNKLEdBQUcsR0FBRztBQUFBLE1BQ1YsQ0FBQztBQUNELFVBQUksY0FBYyxPQUFPLFFBQVEsYUFBYSxrQkFBa0IsRUFBRTtBQUNsRSxlQUFTLE9BQU8sTUFBTTtBQUNsQixlQUFPLE9BQU8sUUFBUSxhQUFhLHFCQUFxQixFQUFFLGNBQWMsUUFBUSxPQUFPLEtBQUssQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQUEsTUFDaEg7QUFrQkEsVUFBSSxpQkFBaUIsQ0FBQztBQUN0QixhQUFPLEtBQUssTUFBTSxFQUFFLFFBQVEsQ0FBQyxRQUFRO0FBQ2pDLHVCQUFlLEtBQUssT0FBTyxHQUFHLENBQUM7QUFDL0IsWUFBSSxhQUFhLE9BQU8sT0FBTyxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUUsT0FBTztBQUN0RCx1QkFBZSxLQUFLLFVBQVU7QUFBQSxNQUNsQyxDQUFDO0FBRUQsVUFBSSxpQkFBaUIsUUFBUSxRQUFRLFNBQU8sT0FBTyxLQUFLLElBQUksR0FBRyxDQUFDO0FBQ2hFLFVBQUksU0FBUyxPQUFPLEtBQUssVUFBVSxhQUFhLGVBQWUsT0FBTyxjQUFjLENBQUM7QUFHckYsVUFBSTtBQUNKLFVBQUksUUFBUyxjQUFhLE9BQU8sUUFBUSxhQUFhLDhCQUE4QixFQUFFLGFBQWEsQ0FBQyxFQUFFLE9BQU8sT0FBTyxPQUFPLEVBQUUsT0FBTyxHQUFHLENBQUM7QUFBQSxlQUMvSCxDQUFDLFFBQVMsY0FBYSxPQUFPLFFBQVEsYUFBYSw4QkFBOEIsRUFBRSxhQUFhLENBQUMsRUFBRSxPQUFPLE1BQU0sT0FBTyxFQUFFLE9BQU8sR0FBRyxDQUFDO0FBSTdJLFVBQUksa0JBQWtCLE9BQU8sUUFBUSxhQUFhLDZDQUE2QyxFQUFFLGNBQWMsWUFBWSxPQUFPO0FBQ2xJLGFBQU8sTUFBTSxRQUFRLCtCQUErQixpQkFBaUIsWUFBWSxNQUFNO0FBQUEsSUFDM0Y7QUFFQSxXQUFPLGdCQUFnQixXQUFXLFlBQVk7QUFFOUMsaUJBQWE7QUFBQSxFQUNyQjs7O0FDckRBLFNBQU8sS0FBSyxNQUFNLDJCQUEyQjtBQUM3QyxTQUFPLEtBQUssUUFBUSxNQUFNO0FBQzFCLFNBQU8sS0FBSyxZQUFZLDZFQUE2RTtBQUNyRyxTQUFPLEtBQUssUUFBUSxRQUFRO0FBRTVCO0FBQUEsSUFBVTtBQUFBLElBQ047QUFBQSxJQUNBO0FBQUEsTUFDSSxLQUFLO0FBQUEsUUFDRCxNQUFNO0FBQUEsUUFDTixJQUFJO0FBQUE7QUFBQSxNQUNSO0FBQUEsSUFDSjtBQUFBLElBQ0E7QUFBQSxNQUNJO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNKO0FBQUEsRUFBQzsiLAogICJuYW1lcyI6IFtdCn0K
